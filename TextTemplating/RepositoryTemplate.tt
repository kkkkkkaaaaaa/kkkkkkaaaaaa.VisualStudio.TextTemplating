namespace <#= this.Context.Namespace #>
{<# forech(var import in this.Context.Imports) { #>
	using <#= import #>
<# } #>

    /// <summary></summary>
    public class <#= this.Context.TypeName #> : <#= this.Context.Inherits #>
    {
	    /// <summary></summary>
        public <#= this.CurrentEntity.TypeName #> Find(int id, DbConnection connection, DbTranaction transaction = null)
        {
            var reader = default(DbDataReader);

            try
            {
                reader = <#= this.CurrentGateway.TypeName #>.Select(tableName, connection, transaction);

                var result = KandaDbDataMapper.MapToObject<<#= this.CurrentEntity.TypeName #>>(reader);

                return result;
            }
            finally
            {
                if (reader != null) { reader.Close(); }
            }
        }
		
	    /// <summary></summary>
        public IEnumerable<<#= this.CurrentEntity.TypeName #>> Retrieve(<#= this.CurrentEntity.TypeName #> criteria, DbConnection connection, DbTranaction transaction = null)
        {
            var reader = default(DbDataReader);

            try
            {
                reader = <#= this.CurrentGateway.TypeName #>.Select(criteria, connection, transaction);

                var result = KandaDbDataMapper.MapToEnumerable<<#= this.CurrentEntity.TypeName #>>(reader);

                return result;
            }
            finally
            {
                if (reader != null) { reader.Close(); }
            }
        }
		
	    /// <summary></summary>
        public IEnumerable<<#= this.CurrentEntity.TypeName #>> Get(DbConnection connection, DbTranaction transaction = null)
        {
            var reader = default(DbDataReader);

            try
            {	
				var criteria = new <#= this.CurrentEntity.TypeName #>();

                reader = this.Retrieve(criteria, connection, transaction);

                var result = KandaDbDataMapper.MapToEnumerable<<#= this.CurrentEntity.TypeName #>>(reader);

                return result;
            }
            finally
            {
                if (reader != null) { reader.Close(); }
            }
        }
		
	    /// <summary></summary>
        public bool Create(<#= this.CurrentEntity.TypeName #> entity, DbConnection connection, DbTranaction transaction = null)
		{
			
		}
		
	    /// <summary></summary>
        public bool Save(<#= this.CurrentEntity.TypeName #> entity, DbConnection connection, DbTranaction transaction = null)
		{
			
		}

		#region Internal members...

		#endregion
		
	    /// <summary></summary>
        internal bool Remove(<#= this.CurrentEntity.TypeName #> criteria, DbConnection connection, DbTranaction transaction = null)
		{
			try
			{
			
			}
		}
		
	    /// <summary></summary>
        internal bool Clear(<#= this.CurrentEntity.TypeName #> criteria, DbConnection connection, DbTranaction transaction = null)
		{
			
		}

		
	    /// <summary></summary>

        #region Private members...

        #endregion
    }
}
