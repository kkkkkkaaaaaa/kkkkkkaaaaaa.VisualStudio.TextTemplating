<#@ template language="C#" #>
namaspace <#= this.Context.Namespace #>
{
<#	foreach(var import in this.Context.Imports) { #>
<#=		string.Format(@"using {0}", import) #>
<#	} #>
	/// <summary>
<#= string.Format(@"	///		{0} の View Model を表します。", this.Context.TypeName) #>
	/// </sumary>
<#= string.Format(@"	public {0} : {1}", this.Context.TypeName, this.Context.Inherits) #><# foreach(var implement in this.Context.Implements) { #><#= string.Format(@", {0}", implement) #><# } #>
	{
		/// <summary>
		/// コンストラクター。
		/// </summary>
<#=		string.Format(@"		public {0}()", this.Context.TypeName) #>
		{
			this.DoNothing();
		}

<#		foreach (var column in this.Context.Columns) { #>
		/// <summary>
<#= string.Format(@"		/// {0} を取得または設定します。", column.ColumnName) #>
		/// </summary>
<#= string.Format(@"		public override {0} {1}", column.DataTypeName, column.ColumnName) #>
		{
<#= string.Format(@"			get {{ return base.{0}; }}", column.ColumnName) #>
			set
			{
<#= string.Format(@"				if (value != base.{0})", column.ColumnName) #>
				{
<#= string.Format(@"					base.{0} = value;", column.ColumnName) #>
<#= string.Format(@"					this.OnPropertyChanged({0});", column.ColumnName) #>
				}
			}
		}
<#		} #>

		#region Protected members...

		/// <summary>
		/// PropertyChanged イベントを発生させます。
		/// </summary>
		/// <param name="propertyName"></param>
		protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		#endregion
	}
}