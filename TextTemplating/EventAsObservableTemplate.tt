<#@ template language="C#" #>

namespace <#= this._context.Namespace #>
{
	using System;
	using System.Reactive;
	using System.Reactive.Linq;
<#	foreach (var import in this._context.Imports) { #>
	using <#= import #>;
<#	} #>

    public static class <#= this._context.TypeName #>
    {
<#		foreach (var info in this._context.Events) { #>
		/// <summary>
        /// <#= info.Name #> イベントを Observable 化して返します。
        /// </summary>
        /// <param name="<#= this._context.SenderName #>"></param>
        /// <returns></returns>
        public static IObservable<EventPattern<RoutedEventArgs>> <#= info.Name #>Observable(this <#= info.DeclaringType.Name #> <#= this._context.SenderName #>)
        {
            return Observable.FromEventPattern<<#= info.EventHandlerType.Name.Replace(@"`1", @"") #>, RoutedEventArgs>(
                handler => (_, e) => handler?.Invoke(<#= this._context.SenderName #>, e)
                , handler => <#= this._context.SenderName #>.<#= info.Name #> += handler
                , handler => <#= this._context.SenderName #>.<#= info.Name #> -= handler);
        }

<#		} #>
    }
}